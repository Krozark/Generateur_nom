
#include "wincompat.h"
#include <fmod.hpp>
#include <fmod_errors.h>

#define SINE_WAVE       0
#define SQUARE_WAVE     1
#define TRIANGLE_WAVE   2
#define SAW_WAVE        4
#define WHITE_NOISE     5



class LireCode
{
    public:
        LireCode(int wave,char* filename,int spc=100, int ltr=10)
        {
            WaveType = wave;
            result = FMOD::System_Create(&system);
            ERRCHECK(result);
            unsigned int version;
            result = system->getVersion(&version);
            ERRCHECK(result);

            if (version < FMOD_VERSION)
            {
                printf("Error!  You are using an old version of FMOD %08x.  This program requires %08x\n", version, FMOD_VERSION);
                exit(0);
            }

            result = system->init(32, FMOD_INIT_NORMAL, 0);
            ERRCHECK(result);

            result = system->createDSPByType(FMOD_DSP_TYPE_OSCILLATOR, &dsp);
            ERRCHECK(result);
            result = dsp->setParameter(FMOD_DSP_OSCILLATOR_RATE, 440.0f);
            ERRCHECK(result);

            result = system->playDSP(FMOD_CHANNEL_REUSE, dsp, true, &channel);

            channel->setVolume(1.0f);
            result = dsp->setParameter(FMOD_DSP_OSCILLATOR_TYPE, WaveType);
            channel->setPan(0.0);
            ERRCHECK(result);

            LetterTime=ltr;
            SpaceTime=spc;
            
        };

        void ReadCode(const char* filename)
        {
            FILE* f=fopen(filename,"r");
            
            if (Line != NULL)
            {
                channel->setPaused(false);
                int i=0;
                while (Line[i] != '\0')
                {
                 ++i;
                }
                int freq=2500+i*i;
                channel->setFrequency(freq);
                Sleep(LetterTime);
                ++i;
                printf("%s",Line);
                channel->setPaused(true);
                Sleep(SpaceTime);
            }
        };

        ~LireMot()
        {
            result = dsp->release();
            ERRCHECK(result);
            result = system->close();
            ERRCHECK(result);
            result = system->release();
            ERRCHECK(result);
        };

    private :
        int WaveType;
        FMOD::System    *system;
        FMOD::Channel   *channel;
        FMOD::DSP       *dsp;
        FMOD_RESULT      result;
        int SpaceTime,LetterTime;

        void ERRCHECK(FMOD_RESULT result)
        {
            if (result != FMOD_OK)
            {
                printf("FMOD error! (%d) %s\n", result, FMOD_ErrorString(result));
                exit(-1);
            }
        };
};
